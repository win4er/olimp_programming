
== Backtracking

Данных подход начинает с 0, а затем прибавляет в решения шаг за шагом. Рекурсивный перебор(поиск) идет через всевозможные различные способы построения решения.

В качестве примера рассмотрим задачу вычисления способов расстановки n дамок на доске n*n так, чтобы они не могли атаковать друг друга.

Для 4 существует только 2 решения:

#figure(
  image("../../images/chess1.png", width: 40%),
)

Задача может быть решена этим способом, добавляя по дамке в каждый из столбцов ряд за рядом, неподходящие способы будем убирать.

#figure(
  image("../../images/chess2.png", width: 70%),
)

*Реализация:*

#rect(
  ```cpp
  void search(int y) {
    if (y == n) {
      count++;
      return;
    }
    for (int x=0; x<n; x++) {
      if (column[x] || diag1[x+y] || diag2[x-ly+n-1]) continue;
      column[x] = diag1[x+y] = diag2[x-y+n-1];
      search(y+1);
      column[x] = diag1[x+y] = diag2[x-y+n-1] = 0;
    }
  }
  ```
)