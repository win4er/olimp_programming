== Scheduling

Большинство задач с расписанием, могут быть решены жадным алгоритмом. Классическая задача такова:

Дано n событий, с их временами их начала и конца, составьте расписание, чтобы можно было включить как можно больше событий.

#figure(
  rect(
    image("../../images/scheduling1.png", width: 40%)
  )
)
        
В данном случае ответ - 2, например B и D:

#figure(
  rect(
    image("../../images/scheduling2.png", width: 40%)
  )
)

        
Реально ли составить жадный алгоритм, чтобы он решал эту задачу при любых исходных?

*Algorithm 1*

Первая идея это выбирать наиболее короткие события из возможных.

#figure(
  rect(
    image("../../images/scheduling3.png", width: 40%)
  )
)

Однако, данная стратегия не может быть верной всегда, тк надо учитывать еще и время начала события:

#figure(
  rect(
    image("../../images/scheduling4.png", width: 40%)
  )
)
          
Тут же и вовсе можно уместить два события, а не одно))

*Algorithm 2*

Можно выбирать следующее событие ближайший после текущего события.

#figure(
  rect(
    image("../../images/scheduling5.png", width: 40%)
  )
)

Даже выбирая ближайшие короткие, мы столкнемся с проблемой:

#figure(
  rect(
    image("../../images/scheduling6.png", width: 40%)
  )
)

*Algorithm 3*

Теперь идея заключается в том, чтобы выбирать те ближайшие события, которые заканчиваются как можно быстрее:

#figure(
  rect(
    image("../../images/scheduling7.png", width: 40%)
  )
)
          
Алгоритм является наиболее оптимальным потому что решены все проблемы задачи:
  • найдено ближайшее событие
  • при этом оно заканчивается раньше остальных
