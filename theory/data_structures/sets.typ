
= Sets

Множеством называется структура данных, в которой хранится набор элементов. Основные операции над множествами - вставка, поиск и удаление. Множества реализованы так, что все эти операции эффективны, что часто позволяет улучшить время работы алгоритмов. 


Множества и мультимножества

В стандартной библиотеке C++ имеются две структуры, относящиеся к множествам:
- set основана на сбалансированном двоичном дереве поиска, его операции работают за время O(log n)
- unordered_set  основана на хэш-таблице и работает в среднем за O(1). (да, есть крайне малая вероятность выполнения работы алгоритма за O(n))
(Позже мы обсудим, что за деревья и хэш-таблицы такие).

Пример работы из коробки:

#rect(
  ```cpp
  set<int> s;
  s.insert(3);
  s.insert(2);
  s.insert(5);
  cout << s.count(3) << '\n'; // 1
  cout << s.count(4) << '\n'; // 0
  s.erase(3);
  s.insert(4);
  cout << s.count(3) << "\n"; // 0
  cout << s.count(4) << "\n"; // 1
  ```)
)

Идея множеств в том, что в ней нет дубликатов, только уникальные элементы. Если элемент уже есть во множестве, его невозможно добавить дважды.

#rect(
  ```cpp
  set<int> s;
  s.insert(3);
  s.insert(3);
  cout << s.count(3) << "\n"; // 1
  ```
)

Множества можно использовать как вектор, однако доступ к элементам с помощью оператора [] невозможен. В коде ниже выводится количество элементов, а затем эти элементы перебираются:

#rect(
  ```cpp
  cout << s.size() << "\n";
  for (auto x : s) {
    cout << x << "\n";
  }
  ```
)

Функция find(x) возвращает итератор, указываюший на элемент со значением x.
Если же множество не содержит x, то возвращается итератор end().

#rect(
  ```cpp
  auto it = s.find(x);
  if (it == s.end()) {
    // x не найден
  }
  ```
)

== Упорядоченные и неупорядоченные множества
Как можно догадаться из названия либо множество упорядочено, либо нет, но что же это значит? Если порядок неважен, берем set, иначе unordered_set:

#figure(
  image("../images/set_example.png", width: 100%),
  caption: [
    Пример работы set и unordered set
  ],
)

== Multisets

Да, есть еще и мультимножества и они тоже либо упорядочены либо нет, отличие от множеств в том, что они допускают повторения.

#rect(
  ```cpp
  multiset<int> s;
  s.insert(5);
  s.insert(5);
  s.insert(5);
  cout << s.count(5) << "\n"; // 3
  ```
)

Функция erase удаляет все копии значения из мультимножества.

#rect(
  ```cpp
  s.erase(5);
  cout << s.count(5) << "\n"; // 0
  ```
)

Если требуется удалить только одно значение, то можно поступить так:

s.erase(s.find(5));
cout << s.count(5) << "\n"; // 2

Но count и erase работают за O(k), где _k_ количество
подсчитываемых или удаляемых элементов