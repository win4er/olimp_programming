#include <iostream>
#include <cmath>

int main() {
	int n, m;
	std::cin >> n >> m;

	int array[n][m];

	for (int i=0; i<n; ++i) {
		for (int j=0; j<m; ++j) {
			std::cin >> array[i][j];
		}
	}

	for (int i=0; i<n; ++i) {
		for (int j=0; j<m; ++j) {
			if (i == 0 && j == 0) continue;
			if (i == 0 || j == 0) {
				if (i == 0) array[i][j] += array[i][j-1];
				if (j == 0) array[i][j] += array[i-1][j];
				continue;
			}

			array[i][j] += std::min(array[i-1][j], array[i][j-1]);
		}
	}

	std::cout << array[n-1][m-1];
	return 0;
}

/*
description:
В каждой клетке прямоугольной таблицы N × M записано некоторое число.
Изначально игрок находится в левой верхней клетке.
За один ход ему разрешается перемещаться в соседнюю клетку либо вправо, либо вниз (влево и вверх перемещаться запрещено).
При проходе через клетку с игрока берут столько килограммов еды, какое число записано в этой клетке (еду берут также за первую и последнюю клетки его пути).

Требуется найти минимальный вес еды в килограммах, отдав которую игрок может попасть в правый нижний угол.

exmpl#1:
input:
5 5
1 1 1 1 1
3 100 100 100 100
1 1 1 1 1
2 2 2 2 1
1 1 1 1 1

output:
11

tags: dynamic programming 2D
*/
